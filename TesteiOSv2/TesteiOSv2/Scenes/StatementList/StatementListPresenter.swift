//
//  StatementListPresenter.swift
//  TesteiOSv2
//
//  Created by Bruno on 09/11/18.
//  Copyright (c) 2018 Bruno Scheltzke. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StatementListPresentationLogic {
    func presentUserInfo(response: StatementList.UserDetail.Response)
    func presentStatements(response: StatementList.Fetch.Response)
    func presentError(response: StatementList.Fetch.Response)
}

class StatementListPresenter: StatementListPresentationLogic {
    weak var viewController: StatementListDisplayLogic?
  
    // MARK: Present user info
  
    func presentUserInfo(response: StatementList.UserDetail.Response) {
        var agency: String = response.user.agency
        if agency.count >= 8 {
            agency.insert("-", at: agency.index(agency.startIndex, offsetBy: 8))
            agency.insert(".", at: agency.index(agency.startIndex, offsetBy: 2))
        }
        
        let account = response.user.bankAccount + " / " + agency
        let balance = response.user.balance.toCurrency() ?? "R$\(response.user.balance)"
        let viewModel = StatementList.UserDetail.ViewModel(name: response.user.name, account: account, balance: balance)
        viewController?.displayUserInfo(viewModel: viewModel)
    }
    
    // MARK: Present statements
    
    func presentStatements(response: StatementList.Fetch.Response) {
        let statements = response.statements.map {
            StatementList.Fetch.ViewModel.StatementInfo.init(title: $0.title,
                                                             detail: $0.desc,
                                                             date: $0.date.replacingOccurrences(of: "-", with: "/"),
                                                             value: $0.value.toCurrency() ?? "R$\($0.value)")
        }
        let viewModel = StatementList.Fetch.ViewModel.init(statements: statements)
        viewController?.displayStatements(viewModel: viewModel)
    }
    
    // MARK: Present error message
    
    func presentError(response: StatementList.Fetch.Response) {
        let viewModel = StatementList.Fetch.ErrorViewModel(message: response.error?.localizedDescription
            ?? "An unexpected error occured")
        viewController?.displayError(viewModel: viewModel)
    }
}
