//
//  LoginInteractorTests.swift
//  TesteiOSv2
//
//  Created by Bruno on 09/11/18.
//  Copyright (c) 2018 Bruno Scheltzke. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TesteiOSv2
import XCTest

class LoginInteractorTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: LoginInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupLoginInteractor()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupLoginInteractor()
  {
    sut = LoginInteractor()
  }
  
  // MARK: Test doubles
  
  class LoginPresentationLogicSpy: LoginPresentationLogic
  {
    var presentExistentLoginInfoCalled = false
    
    func presentExistentLoginInfo(response: Login.ExistingInfo.Response)
    {
      presentExistentLoginInfoCalled = true
    }
  }

   class LoginWorkerSpy: LoginWorker
   {
    var fetchExistingLoginInfoCalled = false
    
    override func fetchExistingLoginInfo() -> (userName: String?, password: String?) {
        fetchExistingLoginInfoCalled = true
        return ("test_user", "Test1@")
    }
   }
  
  // MARK: Tests
  
  func testVerifyLoginInfoShouldAskLoginWorkerToFetchLoginInfo()
  {
    // Given
    let spy = LoginPresentationLogicSpy()
    sut.presenter = spy
    let workerSpy = LoginWorkerSpy(MockLocalStorageManager())
    sut.worker = workerSpy
    
    let request = Login.ExistingInfo.Request()
    
    // When
    sut.verifyExistingLoginInfo(request: request)
    
    // Then
    XCTAssertTrue(workerSpy.fetchExistingLoginInfoCalled, "verifyExistingLoginInfo should ask worker to fetch existing login info")
    XCTAssertTrue(spy.presentExistentLoginInfoCalled, "presentExistentLoginInfo should be called to present the results of the existing login info request")
  }
}
