//
//  StatementListViewControllerTests.swift
//  TesteiOSv2
//
//  Created by Bruno on 09/11/18.
//  Copyright (c) 2018 Bruno Scheltzke. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TesteiOSv2
import XCTest

class StatementListViewControllerTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: StatementListViewController!
  var window: UIWindow!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    window = UIWindow()
    setupStatementListViewController()
  }
  
  override func tearDown()
  {
    window = nil
    super.tearDown()
  }
  
  // MARK: Test setup
  
    func setupStatementListViewController() {
        sut = StatementListViewController()
    }
  
    func loadView() {
        window.rootViewController = sut
        window.makeKeyAndVisible()
        RunLoop.current.run(until: Date())
    }
  
    // MARK: Test doubles
  
    class StatementListBusinessLogicSpy: StatementListBusinessLogic, StatementListDataStore {
        var user: User!
        
        var fetchStatementsCalled = false
        var fetchUserInfoCalled = false

        func fetchUserStatements(request: StatementList.Fetch.Request) {
            fetchStatementsCalled = true
        }
        
        func fetchUserInfo(request: StatementList.UserDetail.Request) {
            fetchUserInfoCalled = true
        }
    }
  
    // MARK: Tests
    func testRequestUserInfoWhenViewIsLoaded() {
        // Given
        let spy = StatementListBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.fetchUserInfoCalled, "viewDidLoad() should ask the interactor to get the user info")
    }
    
    func testRequestStatementsWhenViewIsLoaded() {
        // Given
        let spy = StatementListBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.fetchStatementsCalled, "viewDidLoad() should ask the interactor to get the user statements")
    }
}
