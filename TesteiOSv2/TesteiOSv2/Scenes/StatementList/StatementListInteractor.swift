//
//  StatementListInteractor.swift
//  TesteiOSv2
//
//  Created by Bruno on 09/11/18.
//  Copyright (c) 2018 Bruno Scheltzke. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StatementListBusinessLogic {
    func fetchUserInfo(request: StatementList.UserDetail.Request)
    func fetchUserStatements(request: StatementList.Fetch.Request)
}

protocol StatementListDataStore {
    var user: User! { get set }
}

class StatementListInteractor: StatementListBusinessLogic, StatementListDataStore {
    var presenter: StatementListPresentationLogic?
    var worker: StatementListWorker? = StatementListWorker()
    var user: User!
    
    init() {
        #if XCTESTUI
        // Test only code version code
        self.worker = StatementListWorker(MockAPIService())
        #endif
    }
    
    // MARK: Fetch user info
    func fetchUserInfo(request: StatementList.UserDetail.Request) {
        let response = StatementList.UserDetail.Response(user: user)
        presenter?.presentUserInfo(response: response)
    }
    
    // MARK: Fetch user statements
    func fetchUserStatements(request: StatementList.Fetch.Request) {
        worker?.fetchStatements(of: user, completion: { [weak self] result in
            guard let strongSelf = self else { return }
            
            switch result {
            case let .success(statements):
                let response = StatementList.Fetch.Response(statements: statements, isError: false, error: nil)
                strongSelf.presenter?.presentStatements(response: response)
            case let .failure(error):
                strongSelf.presenter?.presentError(response: StatementList.Fetch.Response(statements: [], isError: true, error: error))
            }
        })
    }
}
