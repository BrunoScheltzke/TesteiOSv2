//
//  LoginInteractorTests.swift
//  TesteiOSv2
//
//  Created by Bruno on 09/11/18.
//  Copyright (c) 2018 Bruno Scheltzke. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TesteiOSv2
import XCTest

class LoginInteractorTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: LoginInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupLoginInteractor()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupLoginInteractor()
  {
    sut = LoginInteractor()
  }
  
  // MARK: Test doubles
  
    class LoginPresentationLogicSpy: LoginPresentationLogic {
        var presentExistentLoginInfoCalled = false
        var presentLoginErrorMessageCalled = false
        var presentLoginSuccesfullCalled = false

        func presentExistentLoginInfo(response: Login.ExistingInfo.Response) {
            presentExistentLoginInfoCalled = true
        }

        func presentLoginErrorMessage(response: Login.Login.Response) {
            presentLoginErrorMessageCalled = true
        }

        func presentLoginSuccesfull(response: Login.Login.Response) {
            presentLoginSuccesfullCalled = true
        }
    }

    class LoginWorkerSpy: LoginWorker {
        var fetchExistingLoginInfoCalled = false
        var performLoginCalled = false
        
        var shouldFailLoginRequest = false

        override func fetchExistingLoginInfo() -> (userName: String?, password: String?) {
            fetchExistingLoginInfoCalled = true
            return ("brunoscheltzke@email.com", "Test1@")
        }
        
        override func performLogin(userName: String, password: String, completion: @escaping (Result<User>) -> Void) {
            performLoginCalled = true
            if shouldFailLoginRequest {
                completion(.failure(CustomError.internetConnection))
            } else {
                let user = User(userId: 1, name: "test", bankAccount: "234", agency: "234", balance: 300)
                completion(.success(user))
            }
        }
    }
  
  // MARK: Tests
  
  func testVerifyLoginInfoShouldAskLoginWorkerToFetchLoginInfo()
  {
    // Given
    let spy = LoginPresentationLogicSpy()
    sut.presenter = spy
    let workerSpy = LoginWorkerSpy(MockLocalStorageService(), MockAPIService())
    sut.worker = workerSpy
    
    let request = Login.ExistingInfo.Request()
    
    // When
    sut.verifyExistingLoginInfo(request: request)
    
    // Then
    XCTAssertTrue(workerSpy.fetchExistingLoginInfoCalled, "verifyExistingLoginInfo should ask worker to fetch existing login info")
    XCTAssertTrue(spy.presentExistentLoginInfoCalled, "presentExistentLoginInfo should be called to present the results of the existing login info request")
  }
    
    func testEmptyNameForLogin() {
        // Given
        let spy = LoginPresentationLogicSpy()
        sut.presenter = spy
        
        let request = Login.Login.Request(userName: nil, password: "sadfsa")
        
        // When
        sut.perfomLogin(request: request)
        XCTAssertTrue(spy.presentLoginErrorMessageCalled, "When trying to login with an invalid user name, a request to worker should not be performed and an error message should be displayed.")
    }
    
    func testEmptyPasswordForLogin() {
        // Given
        let spy = LoginPresentationLogicSpy()
        sut.presenter = spy
        
        let request = Login.Login.Request(userName: "asdfasd", password: nil)
        
        // When
        sut.perfomLogin(request: request)
        XCTAssertTrue(spy.presentLoginErrorMessageCalled, "When trying to login with an invalid password, a request to worker should not be performed and an error message should be displayed.")
    }
    
    // Password must contain:
    // - Captalized letter
    // - Special character
    // - Number
    func testPasswordNotMatchingRequirements() {
        // Given
        let spy = LoginPresentationLogicSpy()
        sut.presenter = spy
        
        let request = Login.Login.Request(userName: "brunoscheltzke@email.com", password: "asdfasdf")
        
        // When
        sut.perfomLogin(request: request)
        XCTAssertTrue(spy.presentLoginErrorMessageCalled, "When trying to login with an invalid password, a request to worker should not be performed and an error message should be displayed.")
    }
    
    // UserName must be:
    // - email (eg.: test@email.com)
    // - CPF (8 numbers)
    func testUserNameNotMatchingRequirements() {
        // Given
        let spy = LoginPresentationLogicSpy()
        sut.presenter = spy
        
        let request = Login.Login.Request(userName: "asdfasd", password: "Test@1")
        
        // When
        sut.perfomLogin(request: request)
        XCTAssertTrue(spy.presentLoginErrorMessageCalled, "When trying to login with an invalid password, a request to worker should not be performed and an error message should be displayed.")
    }
    
    func testSuccessfullLogin() {
        // Given
        let spy = LoginPresentationLogicSpy()
        let workerSpy = LoginWorkerSpy(MockLocalStorageService(), MockAPIService())
        sut.presenter = spy
        sut.worker = workerSpy
        
        let request = Login.Login.Request(userName: "brunoscheltzke@email.com", password: "Test@1")
        
        // When
        sut.perfomLogin(request: request)
        XCTAssertTrue(workerSpy.performLoginCalled, "When trying to login with valid user name and password, the worker should receive a request")
        XCTAssertTrue(spy.presentLoginSuccesfullCalled, "When trying to login with valid username password, a request to the api may still fail, in this case the presentation logic error method should be called")
    }
    
    func testFailedLogin() {
        // Given
        let spy = LoginPresentationLogicSpy()
        let workerSpy = LoginWorkerSpy(MockLocalStorageService(), MockAPIService())
        workerSpy.shouldFailLoginRequest = true
        sut.presenter = spy
        sut.worker = workerSpy
        
        let request = Login.Login.Request(userName: "brunoscheltzke@email.com", password: "Test@1")
        
        // When
        sut.perfomLogin(request: request)
        XCTAssertTrue(workerSpy.performLoginCalled, "When trying to login with valid user name and password, the worker should receive a request")
        XCTAssertTrue(spy.presentLoginErrorMessageCalled, "When trying to login with valid user name and password, the presentation logic should receive a call to its successfull method.")
    }
}
