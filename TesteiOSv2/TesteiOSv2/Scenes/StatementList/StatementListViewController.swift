//
//  StatementListViewController.swift
//  TesteiOSv2
//
//  Created by Bruno on 09/11/18.
//  Copyright (c) 2018 Bruno Scheltzke. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StatementListDisplayLogic: class {
    func displayUserInfo(viewModel: StatementList.UserDetail.ViewModel)
    func displayStatements(viewModel: StatementList.Fetch.ViewModel)
    func displayError(viewModel: StatementList.Fetch.ErrorViewModel)
}

class StatementListViewController: UIViewController, StatementListDisplayLogic {
    var interactor: StatementListBusinessLogic?
    var router: (NSObjectProtocol & StatementListRoutingLogic & StatementListDataPassing)?
    
    // MARK: Outlets
    @IBOutlet weak var tableView: UITableView!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = StatementListInteractor()
        let presenter = StatementListPresenter()
        let router = StatementListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupViewController()
        fetchUserInfo()
        fetchUserStatements()
    }
    
    func setupViewController() {
        tableView.register(type: StatementTableViewCell.self)
    }
    
    @IBAction func leaveButtonTapped(_ sender: Any) {
    }
    
    // MARK: Fetch user info
    
    func fetchUserInfo() {
        interactor?.fetchUserInfo(request: StatementList.UserDetail.Request())
    }
    
    // MARK: Fetch user statements
    
    func fetchUserStatements() {
        interactor?.fetchUserStatements(request: StatementList.Fetch.Request())
    }
    
    func displayUserInfo(viewModel: StatementList.UserDetail.ViewModel) {
        
    }
    
    func displayStatements(viewModel: StatementList.Fetch.ViewModel) {
        
    }
    
    func displayError(viewModel: StatementList.Fetch.ErrorViewModel) {
        
    }
}
