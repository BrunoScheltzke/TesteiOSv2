//
//  StatementListPresenterTests.swift
//  TesteiOSv2
//
//  Created by Bruno on 09/11/18.
//  Copyright (c) 2018 Bruno Scheltzke. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TesteiOSv2
import XCTest

class StatementListPresenterTests: XCTestCase{
    // MARK: Subject under test

    var sut: StatementListPresenter!

    // MARK: Test lifecycle

    override func setUp() {
    super.setUp()
        setupStatementListPresenter()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupStatementListPresenter() {
        sut = StatementListPresenter()
    }

    // MARK: Test doubles

    class StatementListDisplayLogicSpy: StatementListDisplayLogic {
        var displayUserInfoCalled = false
        var displayStatementsCalled = false
        var displayErrorCalled = false
        
        func displayUserInfo(viewModel: StatementList.UserDetail.ViewModel) {
            displayUserInfoCalled = true
        }
        
        func displayStatements(viewModel: StatementList.Fetch.ViewModel) {
            displayStatementsCalled = true
        }
        
        func displayError(viewModel: StatementList.Fetch.ErrorViewModel) {
            displayErrorCalled = true
        }
    }

    // MARK: Tests
    func testPresentUserInfo() {
        // Given
        let spy = StatementListDisplayLogicSpy()
        sut.viewController = spy
        
        // When
        sut.presentUserInfo(response: StatementList.UserDetail.ViewModel(name: "Test", account: "test", balance: "test"))
        
        // Then
        XCTAssertTrue(spy.displayUserInfoCalled, "presentUserInfo(response: ) should ask the viewcontroller to display the user info")
    }
    
    func testPresentStatements() {
        // Given
        let spy = StatementListDisplayLogicSpy()
        sut.viewController = spy
        
        // When
        sut.presentStatements(response: StatementList.Fetch.ViewModel(statements: []))
        
        // Then
        XCTAssertTrue(spy.displayStatementsCalled, "presentStatements(response: ) should ask the viewcontroller to display the user statements")
    }
    
    func testPresentError() {
        // Given
        let spy = StatementListDisplayLogicSpy()
        sut.viewController = spy
        
        // When
        sut.presentError(response: StatementList.Fetch.ErrorViewModel(message: "Unexpected error"))
        
        // Then
        XCTAssertTrue(spy.displayStatementsCalled, "presentError(response: ) should ask the viewcontroller to display an error message related to the fetch of statements")
    }
}
